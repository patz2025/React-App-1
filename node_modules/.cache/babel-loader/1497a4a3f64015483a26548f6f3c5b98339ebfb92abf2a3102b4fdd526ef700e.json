{"ast":null,"code":"var _jsxFileName = \"/Users/Patsy/Documents/GitHub/React-App-1/src/components/Sidebar.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useCallback } from \"react\";\n/**\n * Renders an array of strings passed in that can be filtered and added to as an\n * unordered list.\n * @returns Component\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Sidebar(_ref) {\n  _s();\n  let {\n    initialMenuItems = []\n  } = _ref;\n  let [newMenuItem, setNewMenuItem] = useState(\"\");\n  let [menuItems, setMenuItems] = useState(initialMenuItems); // TODO: 2 Using a state hook, maintain the current menu items as an array state.\n\n  let [filter, setFilter] = useState(\"\");\n  // Adds a single string passed in as parameter to the state element\n  // \"menuItems\" that holds the set of current menu items.\n  let addMenuItem = useCallback(() => {\n    // console.log(\"Added menu item\")\n    if (newMenuItem.trim() !== \"\") {\n      setMenuItems([newMenuItem, ...menuItems]);\n      setNewMenuItem(\"\");\n\n      //   // TODO: 3. Add a new menu item to the correct variable associated with this class.\n      //   // This involves adding a parameter and changing a class instance variable (props).\n      //   setMenuItems([item, ...menuItems])\n    }\n  }, [newMenuItem, menuItems]);\n\n  // TODO: 4. Display ONLY the menu items that contain the filter element value\n  // \"term\" in them. Each menu item should be an unordered list item wrapped in an unordered list (ul) element.\n\n  // TODO: 1 Render inside the outer div an unordered list of the menu items, with each string in the array\n  // its own item.\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      children: menuItems.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"newMenuItemValue\",\n      value: newMenuItem,\n      onChange: event => setNewMenuItem(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addMenuItem\n      /* TODO: 3 */,\n      children: \"Add Item\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"filter\",\n      type: \"text\",\n      value: filter,\n      onChange: event => setFilter(event.target.value),\n      placeholder: \"Filter by...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(Sidebar, \"/oaa6lp+ngPTBrV4SYZja6S1wK0=\");\n_c = Sidebar;\nvar _c;\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"names":["useState","useCallback","Sidebar","initialMenuItems","newMenuItem","setNewMenuItem","menuItems","setMenuItems","filter","setFilter","addMenuItem","trim","map","item","index","event","target","value"],"sources":["/Users/Patsy/Documents/GitHub/React-App-1/src/components/Sidebar.jsx"],"sourcesContent":["import { useState, useCallback } from \"react\"\n/**\n * Renders an array of strings passed in that can be filtered and added to as an\n * unordered list.\n * @returns Component\n */\nexport default function Sidebar({ initialMenuItems = []}) {\n  let [newMenuItem, setNewMenuItem] = useState(\"\")\n  \n  let [menuItems, setMenuItems] = useState(initialMenuItems)  // TODO: 2 Using a state hook, maintain the current menu items as an array state.\n\n  let [filter, setFilter] = useState(\"\")\n  // Adds a single string passed in as parameter to the state element\n  // \"menuItems\" that holds the set of current menu items.\n  let addMenuItem = useCallback(() => {\n    // console.log(\"Added menu item\")\n    if (newMenuItem.trim() !== \"\") {\n      setMenuItems([newMenuItem, ...menuItems])\n      setNewMenuItem(\"\")\n\n    //   // TODO: 3. Add a new menu item to the correct variable associated with this class.\n    //   // This involves adding a parameter and changing a class instance variable (props).\n    //   setMenuItems([item, ...menuItems])\n  }\n  }, [newMenuItem, menuItems])\n\n  // TODO: 4. Display ONLY the menu items that contain the filter element value\n  // \"term\" in them. Each menu item should be an unordered list item wrapped in an unordered list (ul) element.\n\n  // TODO: 1 Render inside the outer div an unordered list of the menu items, with each string in the array\n  // its own item.\n  return (\n    <div> \n      <ul>\n        {menuItems.map((item, index) => (\n          <li key = {index}>\n            {item}\n          </li>\n        ))}\n      </ul>\n      <input\n        type=\"text\"\n        id=\"newMenuItemValue\"\n        value={newMenuItem}\n        onChange={(event) => setNewMenuItem(event.target.value)}\n      ></input>\n      <br />\n\n      <button\n        onClick={addMenuItem}\n          /* TODO: 3 */\n        \n      >\n        Add Item\n      </button>\n      <br />\n      <input\n        id=\"filter\"\n        type=\"text\"\n        value={filter}\n        onChange={(event) => setFilter(event.target.value)}\n        placeholder=\"Filter by...\"\n      ></input>\n    </div>\n  )\n}\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC7C;AACA;AACA;AACA;AACA;AAJA;AAKA,eAAe,SAASC,OAAO,OAA2B;EAAA;EAAA,IAA1B;IAAEC,gBAAgB,GAAG;EAAE,CAAC;EACtD,IAAI,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAEhD,IAAI,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAACG,gBAAgB,CAAC,EAAE;;EAE5D,IAAI,CAACK,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtC;EACA;EACA,IAAIU,WAAW,GAAGT,WAAW,CAAC,MAAM;IAClC;IACA,IAAIG,WAAW,CAACO,IAAI,EAAE,KAAK,EAAE,EAAE;MAC7BJ,YAAY,CAAC,CAACH,WAAW,EAAE,GAAGE,SAAS,CAAC,CAAC;MACzCD,cAAc,CAAC,EAAE,CAAC;;MAEpB;MACA;MACA;IACF;EACA,CAAC,EAAE,CAACD,WAAW,EAAEE,SAAS,CAAC,CAAC;;EAE5B;EACA;;EAEA;EACA;EACA,oBACE;IAAA,wBACE;MAAA,UACGA,SAAS,CAACM,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACzB;QAAA,UACGD;MAAI,GADIC,KAAK;QAAA;QAAA;QAAA;MAAA,QAGjB;IAAC;MAAA;MAAA;MAAA;IAAA,QACC,eACL;MACE,IAAI,EAAC,MAAM;MACX,EAAE,EAAC,kBAAkB;MACrB,KAAK,EAAEV,WAAY;MACnB,QAAQ,EAAGW,KAAK,IAAKV,cAAc,CAACU,KAAK,CAACC,MAAM,CAACC,KAAK;IAAE;MAAA;MAAA;MAAA;IAAA,QACjD,eACT;MAAA;MAAA;MAAA;IAAA,QAAM,eAEN;MACE,OAAO,EAAEP;MACP;MAAA,UAEH;IAED;MAAA;MAAA;MAAA;IAAA,QAAS,eACT;MAAA;MAAA;MAAA;IAAA,QAAM,eACN;MACE,EAAE,EAAC,QAAQ;MACX,IAAI,EAAC,MAAM;MACX,KAAK,EAAEF,MAAO;MACd,QAAQ,EAAGO,KAAK,IAAKN,SAAS,CAACM,KAAK,CAACC,MAAM,CAACC,KAAK,CAAE;MACnD,WAAW,EAAC;IAAc;MAAA;MAAA;MAAA;IAAA,QACnB;EAAA;IAAA;IAAA;IAAA;EAAA,QACL;AAEV;AAAC,GA3DuBf,OAAO;AAAA,KAAPA,OAAO;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}